server:
  port: 8303
spring:
  application:
    name: ribbon-service
eureka:
  instance:
    preferIpAddress: true # 访问路径是否显示IP
    instance-id: ${spring.application.name}-${server.port}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:3000/eureka/
service-url:
  server01: http://server01

# ribbon 配置参数【全局】
ribbon:
  ConnectTimeout: 1000 #服务请求连接超时时间（毫秒）
  ReadTimeout: 3000 #服务请求处理超时时间（毫秒）
  OkToRetryOnAllOperations: true #对超时请求启用重试机制
  MaxAutoRetriesNextServer: 1 #切换重试实例的最大个数
  MaxAutoRetries: 1 # 切换实例后重试最大次数
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #修改负载均衡算法

# ribbon 配置参数【指定服务】
server01:
  ribbon:
    ConnectTimeout: 1000 #服务请求连接超时时间（毫秒）
    ReadTimeout: 3000 #服务请求处理超时时间（毫秒）
    OkToRetryOnAllOperations: true #对超时请求启用重试机制
    MaxAutoRetriesNextServer: 1 #切换重试实例的最大个数
    MaxAutoRetries: 1 # 切换实例后重试最大次数
    # 负载均衡算法
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #从提供服务的实例中以随机的方式
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #以线性轮询的方式，就是维护一个计数器，从提供服务的实例中按顺序选取，第一次选第一个，第二次选第二个，以此类推，到最后一个以后再从头来过
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #在RoundRobinRule的基础上添加重试机制，即在指定的重试时间内，反复使用线性轮询策略来选择可用实例
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule #对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #选择并发较小的实例
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.AvailabilityFilteringRule #先过滤掉故障实例，再选择并发较小的实例
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.ZoneAwareLoadBalancer #采用双重过滤，同时过滤不是同一区域的实例和故障实例，选择并发较小的实例
